import tkinter as tk
from tkinter import filedialog, ttk, messagebox
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
import mplcursors
import os

class SearchableCombobox(tk.Frame):
    def __init__(self, master, values, **kwargs):
        super().__init__(master, **kwargs)
        self.values = values
        self.var = tk.StringVar()
        
        # Create Entry box for search
        self.entry = tk.Entry(self, textvariable=self.var, width=40)  # Set width to 25 for readability
        self.entry.pack(fill=tk.X)
        self.entry.bind("<KeyRelease>", self.update_list)
        self.entry.bind("<FocusIn>", self.show_list)  # Show list when entry is clicked

        # Create Listbox for options
        self.listbox = tk.Listbox(self, height=5, width=25)  # Set width to 25 for readability
        self.listbox.pack(fill=tk.X)
        self.listbox.bind("<<ListboxSelect>>", self.on_select)

        # Initially populate the Listbox
        self.update_list()
        
    def show_list(self, event=None):
        self.listbox.pack(fill=tk.X)  # Show the listbox

    def update_list(self, event=None):
        search_term = self.var.get().lower()
        self.listbox.delete(0, tk.END)
        
        for item in self.values:
            if search_term in item.lower():
                self.listbox.insert(tk.END, item)
        
    def on_select(self, event):
        selected = self.listbox.get(self.listbox.curselection())
        self.var.set(selected)
        # Keep the list visible even after selection, as requested

    def get(self):
        return self.var.get()

class PlotApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Data Plotter")

        # Create a grid layout
        self.root.grid_columnconfigure(0, weight=3)
        self.root.grid_columnconfigure(1, weight=1)

        # Graph Frame
        self.graph_frame = tk.Frame(root)
        self.graph_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

        # Control Frame
        self.control_frame = tk.Frame(root)
        self.control_frame.grid(row=0, column=1, padx=10, pady=10, sticky="nsew")

        # File Path Input
        self.label = tk.Label(self.control_frame, text="Select File (CSV or Excel):")
        self.label.pack(pady=5)

        self.path_entry = tk.Entry(self.control_frame, width=40)
        self.path_entry.pack(pady=5)

        # Lists to hold the dropdowns and file paths for each file loaded
        self.param_dropdowns = []
        self.index_dropdowns = []
        self.file_data = []
        self.file_paths = []

        # Create a bottom frame for the calculation and submit controls
        self.bottom_frame = tk.Frame(self.control_frame)
        self.bottom_frame.pack(side="bottom", pady=10)

        # Expression Input
        self.expr_label = tk.Label(self.bottom_frame, text="Do you want to do any calculations? (optional)")
        self.expr_label.pack(pady=5)
        self.expr_entry = tk.Entry(self.bottom_frame, width=40)
        self.expr_entry.pack(pady=5)

        # Browse Button to select file
        self.browse_button = tk.Button(self.bottom_frame, text="Browse", command=self.browse_file)
        self.browse_button.pack(pady=5)

        # Submit Button
        self.submit_button = tk.Button(self.bottom_frame, text="Submit", command=self.submit)
        self.submit_button.pack(pady=10)

    def browse_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("All Files", "*.*"), ("CSV files", "*.csv"), ("Excel files", "*.xlsx")])
        if file_path:
            current_text = self.path_entry.get()
            if current_text:
                self.path_entry.insert(tk.END, f", {file_path}")
            else:
                self.path_entry.insert(0, file_path)
            self.file_paths.append(file_path)
            self.load_data_and_create_dropdowns(file_path)

    def load_data_and_create_dropdowns(self, file_path):
        if file_path.endswith('.csv'):
            data = pd.read_csv(file_path)
        elif file_path.endswith('.xlsx'):
            data = pd.read_excel(file_path)
        else:
            messagebox.showerror("Error", "Unsupported file format.")
            return

        self.file_data.append(data)
        column_names = data.columns.tolist()
        
        # Adding 'Serial Number' option as the first entry in the dropdown
        serial_option = "Serial Number"
        column_names.insert(0, serial_option)

        # Parameter Dropdown
        param_label = tk.Label(self.control_frame, text=f"Select Parameter for File {len(self.file_data)}:")
        param_label.pack(pady=5)
        param_dropdown = SearchableCombobox(self.control_frame, values=column_names, width=25)  # Increased width for better readability
        param_dropdown.pack(pady=5)
        self.param_dropdowns.append(param_dropdown)

        # Index Column Dropdown
        index_label = tk.Label(self.control_frame, text=f"Select Index Column for File {len(self.file_data)}:")
        index_label.pack(pady=5)
        index_dropdown = SearchableCombobox(self.control_frame, values=column_names, width=25)  # Increased width for better readability
        index_dropdown.pack(pady=5)
        self.index_dropdowns.append(index_dropdown)

    def submit(self):
        operation = self.expr_entry.get()
        fig, ax = plt.subplots(figsize=(10, 6))

        for i, data in enumerate(self.file_data):
            selected_column = self.param_dropdowns[i].get()
            selected_index_column = self.index_dropdowns[i].get()
            file_name = os.path.basename(self.file_paths[i])

            if selected_column and selected_index_column:
                try:
                    # Apply the operation if specified
                    if operation:
                        try:
                            col_data = data[selected_column]
                            transformed_data = col_data.apply(lambda x: eval(f"{x}{operation}"))
                            data[selected_column] = transformed_data
                        except Exception as e:
                            messagebox.showerror("Error", f"Invalid expression: {e}")
                            return

                    # Handle 'Serial Number' option
                    if selected_index_column == "Serial Number":
                        data["Serial Number"] = range(1, len(data) + 1)  # Generate serial numbers based on row count
                        df = data.set_index("Serial Number")
                    else:
                        df = data.set_index(selected_index_column)

                    df[selected_column].plot(ax=ax, label=f"{file_name}: {selected_column}")

                except Exception as e:
                    messagebox.showerror("Error", f"Error in operation or plotting data for {file_name}: {e}")
            else:
                messagebox.showerror("Error", f"Please select valid columns for {file_name}.")

        ax.set_title("Combined Data Plot", fontsize=16)
        ax.set_xlabel("Index", fontsize=12)
        ax.set_ylabel("Values", fontsize=12)
        ax.grid()
        ax.legend(title="Files", fontsize=10)
        plt.xticks(rotation=45)

        for widget in self.graph_frame.winfo_children():
            widget.destroy()

        canvas = FigureCanvasTkAgg(fig, master=self.graph_frame)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

        toolbar = NavigationToolbar2Tk(canvas, self.graph_frame)
        toolbar.update()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

        mplcursors.cursor(ax, hover=True).connect("add", lambda sel: sel.annotation.set_text(f"{sel.artist.get_label()}\n{sel.target[1]:.2f}"))

if __name__ == "__main__":
    root = tk.Tk()
    app = PlotApp(root)
    root.mainloop()
