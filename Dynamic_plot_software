
import tkinter as tk
from tkinter import filedialog, ttk, messagebox
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
import mplcursors
import os
import itertools

class SearchableCombobox(tk.Frame):
    def __init__(self, master, values, **kwargs):
        super().__init__(master, **kwargs)
        self.values = values
        self.var = tk.StringVar()

        self.entry = tk.Entry(self, textvariable=self.var, width=40)
        self.entry.pack(fill=tk.X)
        self.entry.bind("<KeyRelease>", self.update_list)
        self.entry.bind("<FocusIn>", self.show_list)

        self.listbox = tk.Listbox(self, height=5, width=25)
        self.listbox.pack(fill=tk.X)
        self.listbox.bind("<<ListboxSelect>>", self.on_select)
        self.update_list()
        
    def show_list(self, event=None):
        self.listbox.pack(fill=tk.X)

    def update_list(self, event=None):
        search_term = self.var.get().lower()
        self.listbox.delete(0, tk.END)
        
        for item in self.values:
            if search_term in item.lower():
                self.listbox.insert(tk.END, item)
        
    def on_select(self, event):
        if self.listbox.curselection():
            selected = self.listbox.get(self.listbox.curselection())
            self.var.set(selected)

    def get(self):
        return self.var.get()

class PlotApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Data Plotter")

        self.main_frame = tk.Frame(root)
        self.main_frame.pack(fill=tk.BOTH, expand=True)

        self.canvas = tk.Canvas(self.main_frame)
        self.scrollbar = tk.Scrollbar(self.main_frame, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = tk.Frame(self.canvas)

        self.scrollable_frame.bind("<Configure>", lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all")))
        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=self.scrollbar.set)

        self.canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.control_frame = tk.Frame(self.scrollable_frame)
        self.control_frame.pack(side=tk.LEFT, fill=tk.Y)

        self.graph_frame = tk.Frame(self.scrollable_frame)
        self.graph_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

        self.create_controls()

    def create_controls(self):
        self.label = tk.Label(self.control_frame, text="Select File (CSV or Excel):")
        self.label.pack(pady=5)

        self.path_entry = tk.Entry(self.control_frame, width=40)
        self.path_entry.pack(pady=5)

        self.param_dropdowns = []
        self.index_dropdowns = []
        self.file_data = []
        self.file_paths = []
        self.selected_params = []
        self.line_colors = []

        self.selected_params_label = tk.Label(self.control_frame, text="Selected Parameters:")
        self.selected_params_label.pack(pady=5)

        self.selected_params_display = tk.Label(self.control_frame, text="", wraplength=250, justify="left")
        self.selected_params_display.pack(pady=5)

        self.dropdown_frame = tk.Frame(self.control_frame)
        self.dropdown_frame.pack(pady=5)

        self.file_dropdown = ttk.Combobox(self.dropdown_frame, values=[], state="readonly")
        self.file_dropdown.bind("<<ComboboxSelected>>", self.update_selected_file)
        self.file_dropdown.pack(pady=5)

        self.browse_button = tk.Button(self.control_frame, text="Browse", command=self.browse_file)
        self.browse_button.pack(pady=5)

        self.param_frame = tk.Frame(self.control_frame)
        self.param_frame.pack(pady=5)
        
        self.add_button = tk.Button(self.param_frame, text="Add Parameter", command=self.add_parameter)
        self.add_button.pack(pady=5)

        self.expr_label = tk.Label(self.param_frame, text="Do you want to do any calculations? (optional)")
        self.expr_label.pack(pady=5)
        self.expr_entry = tk.Entry(self.param_frame, width=40)
        self.expr_entry.pack(pady=5)

        self.submit_button = tk.Button(self.param_frame, text="Submit", command=self.submit)
        self.submit_button.pack(pady=10)

        self.param_frame.pack_forget()  # Initially hide parameter frame

    def browse_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("All Files", "*.*"), ("CSV files", "*.csv"), ("Excel files", "*.xlsx")])
        if file_path:
            self.path_entry.insert(0, file_path)
            self.file_paths.append(file_path)
            self.file_dropdown['values'] = self.file_paths
            self.file_dropdown.set(os.path.basename(file_path))
            self.load_data_and_create_dropdowns(file_path)

            # Show the parameter frame after selecting a file
            self.param_frame.pack(side=tk.TOP, fill=tk.BOTH)

    def load_data_and_create_dropdowns(self, file_path):
        if file_path.endswith('.csv'):
            data = pd.read_csv(file_path)
        elif file_path.endswith('.xlsx'):
            data = pd.read_excel(file_path)
        else:
            messagebox.showerror("Error", "Unsupported file format.")
            return

        self.file_data.append(data)
        column_names = data.columns.tolist()
        
        index_options = ["Serial Number", "Time"]

        # Clear previously selected parameters
        self.selected_params = []
        self.update_selected_params_display()

        # Clear existing dropdowns and create new ones
        for dropdown in self.param_dropdowns:
            dropdown.destroy()
        self.param_dropdowns.clear()

        for dropdown in self.index_dropdowns:
            dropdown.destroy()
        self.index_dropdowns.clear()

        # Create parameter dropdown
        self.param_label = tk.Label(self.param_frame, text=f"Select Parameter for {os.path.basename(file_path)}:")
        self.param_label.pack(pady=5)
        self.param_dropdown = SearchableCombobox(self.param_frame, values=column_names, width=25)
        self.param_dropdown.pack(pady=5)
        self.param_dropdowns.append(self.param_dropdown)

        # Create index dropdown
        self.index_label = tk.Label(self.param_frame, text=f"Select Index Column for {os.path.basename(file_path)}:")
        self.index_label.pack(pady=5)
        self.index_dropdown = SearchableCombobox(self.param_frame, values=index_options, width=25)
        self.index_dropdown.pack(pady=5)
        self.index_dropdowns.append(self.index_dropdown)

    def update_selected_file(self, event):
        selected_file = self.file_dropdown.get()
        if selected_file:
            # Clear previously selected parameters and dropdowns
            self.selected_params = []
            self.update_selected_params_display()

            # Load new parameters from the selected file
            file_index = self.file_paths.index(selected_file)
            self.load_data_and_create_dropdowns(self.file_paths[file_index])

    def add_parameter(self):
        if self.param_dropdowns:
            selected_param = self.param_dropdown.get()
            if selected_param and selected_param not in self.selected_params:
                self.selected_params.append(selected_param)
                self.update_selected_params_display()

    def update_selected_params_display(self):
        params_text = "\n".join(self.selected_params)
        self.selected_params_display.config(text=params_text)

    def submit(self):
        operation = self.expr_entry.get()
        fig, ax = plt.subplots(figsize=(10, 6))

        colors = itertools.cycle(plt.cm.tab10.colors)
        lines = []

        # Use the number of file_data and index_dropdowns instead of i
        for i in range(len(self.file_data)):
            if i < len(self.index_dropdowns):  # Check if index_dropdown exists
                selected_index_column = self.index_dropdowns[i].get()
                file_name = os.path.basename(self.file_paths[i])

                if selected_index_column and self.selected_params:
                    try:
                        data = self.file_data[i]
                        if selected_index_column == "Serial Number":
                            data["Serial Number"] = range(1, len(data) + 1)
                            df = data.set_index("Serial Number")
                        elif selected_index_column == "Time":
                            data["Time"] = pd.to_datetime(data["Time"], errors='coerce')
                            df = data.set_index("Time")
                        else:
                            df = data.set_index(selected_index_column)

                        for selected_param in self.selected_params:
                            if selected_param in data.columns:
                                col_data = df[selected_param].dropna()
                                if operation:
                                    try:
                                        transformed_data = col_data.apply(lambda x: eval(f"{x}{operation}"))
                                        col_data = transformed_data
                                    except Exception as e:
                                        messagebox.showerror("Error", f"Invalid expression: {e}")
                                        return
                                color = next(colors)
                                line, = ax.plot(col_data.index, col_data, label=f"{file_name}: {selected_param}", color=color, picker=True)
                                lines.append(line)

                    except Exception as e:
                        messagebox.showerror("Error", f"Error processing file {file_name}: {e}")

        ax.set_xlabel('Index')
        ax.set_ylabel('Value')
        ax.set_title('Dynamic Plot')
        ax.legend()
        fig.tight_layout()

        # Connect pick event for toggling lines
        mplcursors.cursor(lines).connect("add", lambda sel: sel.annotation.set_text(sel.artist.get_label()))

        def toggle_lines(event):
            if event.artist in lines:
                visible = not event.artist.get_visible()
                event.artist.set_visible(visible)
                self.plot(fig)  # Pass the figure to the plot function

        fig.canvas.mpl_connect("pick_event", toggle_lines)

        self.plot(fig)

    def plot(self, fig):
        for widget in self.graph_frame.winfo_children():
            widget.destroy()

        canvas = FigureCanvasTkAgg(fig, master=self.graph_frame)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

        toolbar = NavigationToolbar2Tk(canvas, self.graph_frame)
        toolbar.update()
        canvas._tkcanvas.pack(fill=tk.BOTH, expand=True)

if __name__ == "__main__":
    root = tk.Tk()
    app = PlotApp(root)
    root.mainloop()
