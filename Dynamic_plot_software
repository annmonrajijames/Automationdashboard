import tkinter as tk
from tkinter import filedialog, ttk, messagebox
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
import mplcursors
import os
import itertools

class SearchableCombobox(tk.Frame):
    def __init__(self, master, values, **kwargs):
        super().__init__(master, **kwargs)
        self.values = values
        self.var = tk.StringVar()

        self.entry = tk.Entry(self, textvariable=self.var, width=40)
        self.entry.pack(fill=tk.X)
        self.entry.bind("<KeyRelease>", self.update_list)
        self.entry.bind("<FocusIn>", self.show_list)

        self.listbox = tk.Listbox(self, height=5, width=25)
        self.listbox.pack(fill=tk.X)
        self.listbox.bind("<<ListboxSelect>>", self.on_select)
        self.update_list()
        
    def show_list(self, event=None):
        self.listbox.pack(fill=tk.X)

    def update_list(self, event=None):
        search_term = self.var.get().lower()
        self.listbox.delete(0, tk.END)
        
        for item in self.values:
            if search_term in item.lower():
                self.listbox.insert(tk.END, item)
        
    def on_select(self, event):
        if self.listbox.curselection():
            selected = self.listbox.get(self.listbox.curselection())
            self.var.set(selected)

    def get(self):
        return self.var.get()

class PlotApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Data Plotter")

        self.main_frame = tk.Frame(root)
        self.main_frame.pack(fill=tk.BOTH, expand=True)

        self.canvas = tk.Canvas(self.main_frame)
        self.scrollbar = tk.Scrollbar(self.main_frame, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = tk.Frame(self.canvas)

        self.scrollable_frame.bind("<Configure>", lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all")))
        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=self.scrollbar.set)

        self.canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.control_frame = tk.Frame(self.scrollable_frame)
        self.control_frame.pack(side=tk.LEFT, fill=tk.Y)

        self.graph_frame = tk.Frame(self.scrollable_frame)
        self.graph_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

        self.create_controls()

    def create_controls(self):
        self.label = tk.Label(self.control_frame, text="Select File (CSV or Excel):")
        self.label.pack(pady=5)

        self.path_entry = tk.Entry(self.control_frame, width=40)
        self.path_entry.pack(pady=5)

        self.param_dropdowns = []
        self.index_dropdowns = []
        self.file_data = []
        self.file_paths = []
        self.selected_params = []
        self.line_colors = {}

        self.selected_params_label = tk.Label(self.control_frame, text="Selected Parameters:")
        self.selected_params_label.pack(pady=5)

        self.selected_params_display = tk.Label(self.control_frame, text="", wraplength=250, justify="left")
        self.selected_params_display.pack(pady=5)

        self.bottom_frame = tk.Frame(self.control_frame)
        self.bottom_frame.pack(side="bottom", pady=10)

        self.expr_label = tk.Label(self.bottom_frame, text="Do you want to do any calculations? (optional)")
        self.expr_label.pack(pady=5)
        self.expr_entry = tk.Entry(self.bottom_frame, width=40)
        self.expr_entry.pack(pady=5)

        self.browse_button = tk.Button(self.bottom_frame, text="Browse", command=self.browse_file)
        self.browse_button.pack(pady=5)

        self.add_button = tk.Button(self.bottom_frame, text="Add Parameter", command=self.add_parameter)
        self.add_button.pack(pady=5)

        self.submit_button = tk.Button(self.bottom_frame, text="Submit", command=self.submit)
        self.submit_button.pack(pady=10)

    def browse_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("All Files", "*.*"), ("CSV files", "*.csv"), ("Excel files", "*.xlsx")])
        if file_path:
            self.path_entry.insert(0, file_path)
            self.file_paths.append(file_path)
            self.load_data_and_create_dropdowns(file_path)

    def load_data_and_create_dropdowns(self, file_path):
        if file_path.endswith('.csv'):
            data = pd.read_csv(file_path)
        elif file_path.endswith('.xlsx'):
            data = pd.read_excel(file_path)
        else:
            messagebox.showerror("Error", "Unsupported file format.")
            return

        self.file_data.append(data)
        column_names = data.columns.tolist()
        
        index_options = ["Serial Number", "Time"]
        
        param_label = tk.Label(self.control_frame, text=f"Select Parameter for File {len(self.file_data)}:")
        param_label.pack(pady=5)
        param_dropdown = SearchableCombobox(self.control_frame, values=column_names, width=25)
        param_dropdown.pack(pady=5)
        self.param_dropdowns.append(param_dropdown)

        index_label = tk.Label(self.control_frame, text=f"Select Index Column for File {len(self.file_data)}:")
        index_label.pack(pady=5)
        index_dropdown = SearchableCombobox(self.control_frame, values=index_options, width=25)
        index_dropdown.pack(pady=5)
        self.index_dropdowns.append(index_dropdown)

    def add_parameter(self):
        if self.param_dropdowns:
            selected_param = self.param_dropdowns[-1].get()
            if selected_param and selected_param not in self.selected_params:
                self.selected_params.append(selected_param)
                self.update_selected_params_display()

    def update_selected_params_display(self):
        params_text = "\n".join(self.selected_params)
        self.selected_params_display.config(text=params_text)

    def submit(self):
        operation = self.expr_entry.get()
        fig, ax = plt.subplots(figsize=(10, 6))

        colors = itertools.cycle(plt.cm.tab10.colors)
        lines = []
        line_names = {}

        for i, data in enumerate(self.file_data):
            selected_index_column = self.index_dropdowns[i].get()
            file_name = os.path.basename(self.file_paths[i])

            if selected_index_column and self.selected_params:
                try:
                    if selected_index_column == "Serial Number":
                        data["Serial Number"] = range(1, len(data) + 1)
                        df = data.set_index("Serial Number")
                    elif selected_index_column == "Time":
                        data["Time"] = pd.to_datetime(data["Time"], errors='coerce')
                        df = data.set_index("Time")
                    else:
                        df = data.set_index(selected_index_column)

                    for selected_param in self.selected_params:
                        if selected_param in data.columns:
                            col_data = df[selected_param].dropna()
                            if operation:
                                try:
                                    transformed_data = col_data.apply(lambda x: eval(f"{x}{operation}"))
                                    col_data = transformed_data
                                except Exception as e:
                                    messagebox.showerror("Error", f"Invalid expression: {e}")
                                    return
                            color = next(colors)
                            line, = ax.plot(col_data.index, col_data, label=f"{file_name}: {selected_param}", color=color, picker=True)
                            lines.append(line)
                            line_names[line] = f"{file_name}: {selected_param}"  # Store reference to parameter

                except Exception as e:
                    messagebox.showerror("Error", f"Error plotting data for {file_name}: {e}")

        ax.set_title("Combined Data Plot", fontsize=16)
        ax.set_xlabel(selected_index_column, fontsize=12)
        ax.set_ylabel("Parameters", fontsize=12)
        ax.grid()
        legend = ax.legend(title="Files", fontsize=10)
        plt.xticks(rotation=45)

        # Create a toggle line in the legend for each line
        for line in lines:
            legend_line = ax.plot([], [], color=line.get_color(), label="", picker=True, linewidth=6)[0]
            legend_line.set_visible(True)  # Make sure it's visible
            legend_line._toggle_line = line  # Store the actual line to toggle

        # Toggle visibility on click in the legend
        def on_click(event):
            # Check if the event is on a legend line
            if event.artist in lines:
                visible = not event.artist.get_visible()
                event.artist.set_visible(visible)
                fig.canvas.draw()

        fig.canvas.mpl_connect("pick_event", on_click)

        cursor = mplcursors.cursor(ax, hover=True)
        cursor.connect("add", lambda sel: sel.annotation.set_text(f"{selected_index_column}: {sel.target[0]:.2f}\nValue: {sel.target[1]:.2f}"))

        canvas = FigureCanvasTkAgg(fig, master=self.graph_frame)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

        toolbar = NavigationToolbar2Tk(canvas, self.graph_frame)
        toolbar.update()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

if __name__ == "__main__":
    root = tk.Tk()
    app = PlotApp(root)
    root.mainloop()
